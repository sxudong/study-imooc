package design.pattern.structural.flyweight.Sample;

/**
 * 图解设计模式 第20章 Flyweight模式
 *
 *  享元模式，一言以蔽之就是“通过尽量共享实例来避免new出实例”。当需要某个
 *  实例时，并不总是通过new关键字来生成实例，而是尽量共和已经存在的实例。
 */
public class Main {
    // 设置工作目录：F:\code\design_pattern\src\main\java\com\geely\design\pattern\structural\flyweight\Sample
    public static void main(String[] args) {
        //使用共享对象
        BigString bs = new BigString("12");
        bs.print();
        //不使用共享对象
        BigChar bc = new BigChar("9".charAt(0));
        bc.print();

        BigCharFactory instance = BigCharFactory.getInstance();
        BigChar bigChar = instance.getBigChar("5".charAt(0));
        bigChar.print();
    }
}
/* Output:
......##........
..######........
......##........
......##........
......##........
......##........
..##########....
................
....######......
..##......##....
..........##....
......####......
....##..........
..##............
..##########....
................
....######......
..##......##....
..##......##....
....########....
..........##....
..##......##....
....######......
................
..##########....
..##............
..##............
..########......
..........##....
..##......##....
....######......
................
*///~