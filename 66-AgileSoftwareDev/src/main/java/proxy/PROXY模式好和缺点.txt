PROXY模式的好处：
      虽然代理会带来很多讨厌的问题，但是它们具有一个非常大的好处：重要关系的分离（separation of concerns）。
在我们的例子中，业务规则和数据库就被完全分开了。OrderImp对于数据库没有任何依赖。如果想要更改数据库
模式或者数据引擎，我们可以在不影响 Order、OrderImp 以及任何其他业务领域类的情况下完成它。

      在哪些把业务规则和数据库实现分离显得非常重要的情况中，PROXY模式是很适用的。就此而言，PROXY模式
可以用来分离业务规则和任何种类的实现问题。它可以用来防止业务规则被诸如：COM、CORBA、EJB等东西污染。
这是当前流行的一种保持项目的业务规则逻辑和实现机制分离的方法。

Spring AOP 也是用 PROXY模式实现方法代理和增强。

PROXY模式的坏处：
      规范模式中所隐含的简单委托模型很少能被优美地实现。相后，我们经常会取消对于繁琐的获取和设置方法的委托。
对于哪些管理 1:N 关系的方法来说，我们会推迟委托并把它移到其他方法中，就像把 addItem 的委托移到 total 方法
中一样。最后，我们还要面临缓存的困扰。
      在本例中，我们没有进行任何缓存。所有的测试都在一秒内运行完成，所以无需过多的担心性能问题。但是在真实的
应用程序中，很可能就要考虑性能问题并很可能会需要智能缓存机制。我不赞成因为惧怕如果没有缓存会导致性能降低，
而机械地去实现一个缓存策略的做法。事实上，我已经发现过早地加入缓存反而会有效的降低性能。如果你担心性能可能
是个问题，我建议你做一些试验去证明它确实是一个问题。当且仅当得到证实时，你才应该考虑如何去提速。
