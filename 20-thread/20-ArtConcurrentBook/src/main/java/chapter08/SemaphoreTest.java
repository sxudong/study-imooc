package chapter08;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Semaphore;/** * 8.3 控制并发线程数的 Semaphore  代码清单8-7 * * Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以 * 保证合理的使用公共资源。 * * 把它比作是控制流量的红绿灯。比如××马路要限制流量。 * * 假如有一个需求，要读取几万个文件的数据，因为都是 IO 密集型任务，我们可以启动几十个线程 * 并发地读取，但是如果读到内存后，还需要存储到数据库中，而数据库的连接数只有 10 个，这 * 时我们必须控制只有 10 个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连 * 接。这个时候，就可以使用 Semaphore 来做流量控制，如代码所示。 */public class SemaphoreTest {    private static final int       THREAD_COUNT = 30;    private static ExecutorService threadPool   = Executors.newFixedThreadPool(THREAD_COUNT);    //信号量（允许的并发数）    private static Semaphore       s            = new Semaphore(10);    public static void main(String[] args) {        for (int i = 0; i < THREAD_COUNT; i++) {            threadPool.execute(new Runnable() {                @Override                public void run() {                    try {                        s.acquire(); //获取一个许可证                        System.out.println(Thread.currentThread().getName() + " save data");                        s.release(); //归还许可证                    } catch (InterruptedException e) {                    }                }            });        }        threadPool.shutdown();    }}// 在代码中，虽然有30个线程在执行，但是只允许 10 个并发执行。Semaphore 的构造方法// Semaphore（int permits）接受一个整型的数字，表示可用的许可证数量。Semaphore（10）表示允// 许 10 个线程获取许可证，也就是最大并发数是10。/* Output:pool-1-thread-1 save datapool-1-thread-2 save datapool-1-thread-3 save data......pool-1-thread-30 save datapool-1-thread-29 save datapool-1-thread-22 save data */