package chapter06;import java.util.concurrent.ExecutionException;import java.util.concurrent.ForkJoinPool;import java.util.concurrent.Future;import java.util.concurrent.RecursiveTask;/** * 6.4.4 使用Fork/Join框架 —— 计数器任务 * * @author tengfei.fangtf * @version $Id: CountTask.java, v 0.1 2015-8-1 上午12:00:29 tengfei.fangtf Exp $ */public class CountTask extends RecursiveTask<Integer> {    private static final int THRESHOLD = 2; // 阈值    private int start;    private int end;    public CountTask(int start, int end) {        this.start = start;        this.end = end;    }    @Override    protected Integer compute() {        int sum = 0;        // 如果任务足够小就计算任务        boolean canCompute = (end - start) <= THRESHOLD;        if (canCompute) {            for (int i = start; i <= end; i++) {                sum += i;            }        } else {            // 1.如果任务大于阈值，就分裂成两个子任务计算            int middle = (start + end) / 2;            CountTask leftTask = new CountTask(start, middle);            CountTask rightTask = new CountTask(middle + 1, end);            // 2.执行子任务            leftTask.fork();            rightTask.fork();            // 3.等待子任务执行完，并得到其结果            int leftResult = leftTask.join();            int rightResult = rightTask.join();            // 4.合并子任务            sum = leftResult + rightResult;        }        return sum;    }    public static void main(String[] args) {        // ForkJoinTask 需要通过 ForkJoinPool 来执行        ForkJoinPool forkJoinPool = new ForkJoinPool();        // 生成一个计算任务，负责计算1+2+3+4        CountTask task = new CountTask(1, 100); //5050        // 执行一个任务        Future<Integer> result = forkJoinPool.submit(task);        try {            System.out.println(result.get());        } catch (InterruptedException e) {        } catch (ExecutionException e) {        }    }}//    public final ForkJoinTask fork() {//        Thread t;//        // 首先取到了当前线程，然后判断是否是 ForkJoinWorkerThread类型 的线程//        // 如果是，则强制类型转换(向下转换)成 ForkJoinWorkerThread, 然后将任务push到这个线程负责的队列里面去。//        if ((t = Thread.currentThread()) instanceof ForkJoinWorkerThread)//            ((ForkJoinWorkerThread)t).workQueue.push(this);//        else//            ForkJoinPool.common.externalPush(this);//        return this;//    }