package chapter11.example;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * LinkedBlockingQueue阻塞队列大小的配置是可选的，如果我们初始化时指定一个大小，它就是有边界的，
 * 如果不指定，它就是无边界的。说是无边界，其实是采用了默认大小为Integer.MAX_VALUE的容量 。它的内部实现是一个链表。
 * 和ArrayBlockingQueue一样，LinkedBlockingQueue 也是以先进先出的方式存储数据，最新插入的对象是尾部，最新移出的对象是头部
 */
public class Main {
    public static void main(String[] args) throws InterruptedException{
        BlockingQueue<String> queue = new LinkedBlockingQueue<>(10);

        ProducerThread producerThread1 = new ProducerThread(queue);
        ProducerThread producerThread2 = new ProducerThread(queue);
        ConsumerThread consumerThread = new ConsumerThread(queue);

        Thread t1 = new Thread(producerThread1);
        Thread t2 = new Thread(producerThread2);
        Thread t3 = new Thread(consumerThread);

        t1.start();
        t2.start();
        t3.start();

        Thread.sleep(10000);
        producerThread1.stop();
        producerThread2.stop();
    }
}
/* Output:
    生产线程启动...
    正在生产...
    消费线程启动...
    消费者正在获取数据...
    生产线程启动...
    正在生产...
    生产者存入1到队列成功
    生产者存入2到队列成功
    消费者拿到队列中的数据:2
    正在生产...
    生产者存入3到队列成功
    正在生产...
    生产者存入4到队列成功
    消费者正在获取数据...
    消费者拿到队列中的数据:1
    正在生产...
    消费者正在获取数据...
    正在生产...
    消费者拿到队列中的数据:3
    生产者存入5到队列成功
    生产者存入6到队列成功
    消费者正在获取数据...
    正在生产...
    正在生产...
    生产者存入8到队列成功
    生产者存入7到队列成功
    消费者拿到队列中的数据:4
    正在生产...
    消费者正在获取数据...
    正在生产...
    消费者拿到队列中的数据:5
    生产者存入9到队列成功
    生产者存入10到队列成功
    消费者正在获取数据...
    消费者拿到队列中的数据:6
    正在生产...
    正在生产...
    生产者存入11到队列成功
    生产者存入12到队列成功
    消费者正在获取数据...
    正在生产...
    正在生产...
    生产者存入13到队列成功
    消费者拿到队列中的数据:7
    生产者存入14到队列成功
    正在生产...
    生产者存入15到队列成功
    正在生产...
    消费者正在获取数据...
    生产者存入16到队列成功
    消费者拿到队列中的数据:8
    正在生产...
    消费者正在获取数据...
    正在生产...
    消费者拿到队列中的数据:9
    生产者存入17到队列成功
    生产者存入18到队列成功
    消费者正在获取数据...
    正在生产...
    生产者存入19到队列成功
    正在生产...
    消费者拿到队列中的数据:10
    生产者存入20到队列成功
    消费者正在获取数据...
    生产结束
    生产结束
    消费者拿到队列中的数据:11
    消费者正在获取数据...
    消费者拿到队列中的数据:12
    消费者正在获取数据...
    消费者拿到队列中的数据:13
    消费者正在获取数据...
    消费者拿到队列中的数据:14
    消费者正在获取数据...
    消费者拿到队列中的数据:15
    消费者正在获取数据...
    消费者拿到队列中的数据:16
    消费者正在获取数据...
    消费者拿到队列中的数据:17
    消费者正在获取数据...
    消费者拿到队列中的数据:18
    消费者正在获取数据...
    消费者拿到队列中的数据:19
    消费者正在获取数据...
    消费者拿到队列中的数据:20
    消费者正在获取数据...
    消费者未拿到队列中的数据
    消费者结束
 */