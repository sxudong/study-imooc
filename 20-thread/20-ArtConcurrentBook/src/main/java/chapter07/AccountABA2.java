package chapter07;import java.util.concurrent.atomic.AtomicStampedReference;import static java.lang.Thread.sleep;/** * 解决 CAS 中的 ABA 问题：版本号机制 * <p> * 一般是在数据表中加上一个数据版本号 version 字段(原子引用类型)， * 表示数据被修改的次数，当数据被修改时，version 值会加一。 * 当线程 A 要更新数据值时，在读取数据的同时也会读version 值，在 * 提交更新时，若刚才读取到的 version 值为当前数据库中的 version * 值相等时才更新，否则重试更新操作，直到更新成功。 */public class AccountABA2 {    static AtomicStampedReference<String> reference = new AtomicStampedReference<>("A", 0);    public static void main(String[] args) throws InterruptedException {        System.out.print(Thread.currentThread().getName() + " start running ：");        String prev = reference.getReference();        // 获取版本号        int stamp = reference.getStamp();        System.out.println("初始版本号：" + stamp);        other();        sleep(1000);        System.out.print("初始版本号：" + reference.getStamp() + "\t");        // 如果数据被修改时，则版本号+1        System.out.println(Thread.currentThread().getName() + " change: A -> C : " +                reference.compareAndSet(prev, "C", stamp, stamp + 1) + " CAS操作之后的版本号：" + reference.getStamp());    }    //展示 CAS 中的 ABA 问题    private static void other() throws InterruptedException {        new Thread(() -> {            int stamp = reference.getStamp();            System.out.print("初始版本号：" + stamp + "\t");            System.out.println(Thread.currentThread().getName() + " change A -> B : " +                    reference.compareAndSet(reference.getReference(), "B", stamp, stamp + 1) + " CAS操作之后的版本号：" + reference.getStamp());        }, "thread1").start();        sleep(1000);        new Thread(() -> {            int stamp = reference.getStamp();            System.out.print("初始版本号：" + stamp + "\t");            System.out.println(Thread.currentThread().getName() + " change B -> A : " +                    reference.compareAndSet(reference.getReference(), "A", stamp, stamp + 1) + " CAS操作之后的版本号：" + reference.getStamp());        }, "thread2").start();    }}/* Output:main start running ：初始版本号：0初始版本号：0	thread1 change A -> B : true CAS操作之后的版本号：1初始版本号：1	thread2 change B -> A : true CAS操作之后的版本号：2初始版本号：2	main change: A -> C : false CAS操作之后的版本号：2 */