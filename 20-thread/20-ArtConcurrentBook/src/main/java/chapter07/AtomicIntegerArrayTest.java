package chapter07;import java.util.concurrent.atomic.AtomicIntegerArray;/** * 7.2 原子更新数组 代码清单7-4 */public class AtomicIntegerArrayTest {    static int[] value = new int[] { 1, 2 };    static AtomicIntegerArray ai = new AtomicIntegerArray(value);    /**     * 需要注意的是，数组value通过构造方法传递进去，然后AtomicIntegerArray会将当前数组     * 复制一份，所以当AtomicIntegerArray对内部的数组元素进行修改时，不会影响传入的数组。     *   public AtomicIntegerArray(int[] array) {     *       // Visibility guaranteed by final field guarantees     *       this.array = array.clone();     *   }     */    public static void main(String[] args) {        // 以原子方式将数组下标0的值，设置为 newValue 的值，并返回旧值。        int andSet = ai.getAndSet(0, 3);        System.out.println(andSet);  //1        System.out.println(ai.get(0)); //3        System.out.println(value[0]);  //1    }}