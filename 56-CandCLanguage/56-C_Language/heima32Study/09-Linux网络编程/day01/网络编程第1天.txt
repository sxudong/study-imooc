网络编程部分:

课程安排 8 天：
前5天 网络编程
		前三天 概念+编程
			day01 基础概念  socket编程
			day02  三次握手和四次挥手  高并发服务器(多进程和多线程)
			day03 TCP-状态转换图  高并发服务器-select-poll-epoll
			day04  高并发服务器-epoll  epoll反应堆
			day05  线程池 UDP - 本地套接字
第6天 libevent  第三方的网络框架
第7-8天 网络编程阶段项目-web服务器

协议: 协议是双方共同指定的一组规则, 在网络通信中表示通信双方
	  传递数据和解释数据的一组规则.

OSI7层模型:
	物数网传会表应
	应用层: 主要就是应用程序, ftp ssh email http
	表示层: 进行编解码和翻译工作
	会话层: 建立会话和保持会话
	传输层: 定义了端端端的传输, TCP  UDP协议
	网络层: 定义了点到点的传输, IP协议----路由器
	数据链路层: 数据校验, 定义了数据格式--帧, ARP协议  RARP协议
	物理层: 通信介质-双绞线, 光纤  调制解调器modemn(模数转换和数模转换)

TCP四层模型:
	应用层: 对应会话层,表示层和应用层
	传输层: 对应传输层
	网络层: 对应网络层
	网络接口层: 对应于物理层和数据链路层

数据通信过程:
	在发送方是数据层层打包过程, 在接收方是层层解包过程.

网络应用程序常见的两种设计模式:
1 C/S模式:
	优点:可以安装在本地, 可以缓存数据, 协议的选择灵活,
	缺点:客户端工具需要有程序员开发, 开发周期长工作量大;
		需要本地安装, 对客户的电脑安全有一定影响.
2 B/S模式:
	浏览器/web服务器模式.
	优点:浏览器不用开发, 开发周期短,工作量小
	缺点: 只能选择http协议, 协议选择受限制, 不能缓存数据, 效率受影响.
3 以太网帧格式:
	ARP协议: 通过对方的IP地址获取MAC地址.

	IP协议:在网络层
	TCP协议:面向连接的, 安全的,可靠的数据流传输协议.
	UDP协议:面向无连接的, 不安全的,不可靠的数据报传输.

4 字节序问题
	大端字节序:也叫高端字节序(网络字节序), 是高端地址存放低位数据, 低端地址存放高位数据
	小端字节序:也叫低端字节序, 是低地址存放低位数据, 高地址存放高位数据

5 服务端开发流程:
	1 创建socket,返回一个文件描述符lfd---socket()
		--该文件描述符用于监听客户端连接
	2 将lfd和IP  PORT进行绑定----bind()
	3 将lfd由主动变为被动监听----listen()
	4 接受一个新的连接,得到一个文件描述符cfd----accept()
		---该文件描述符是用于和客户端进行通信的
	5 while(1)
	  {
	  	接收数据---read或者recv
	  	发送数据---write或者send
	  }
	6 关闭文件描述符----close(lfd)  close(cfd);

客户端的开发流程:
	1 创建socket, 返回一个文件描述符cfd---socket()
		---该文件描述符是用于和服务端通信
	2 连接服务端---connect()
	3 while(1)
	  {
	  	//发送数据---write或者send
	  	//接收数据---read或者recv
	  }

	4 close(cfd)

一些细节:
1 调用accept函数不是说新建一个连接, 而是从已连接队列中取出一个可用连接.