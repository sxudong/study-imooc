网络嗅探工具:
网络嗅探: 其实就是通过使用网络嗅探工具抓包, 分析和研究,
		  常用的工具有wireshark和tcpdump.

tcpdump :
1 指定网卡抓包
  sudo tcpdump -i ens33 -vv
  参数说明: -i: 指定网卡

2 将抓到的包保存到文件中
  sudo tcpdump -i ens33 -vv -w ./test.pcap
  sudo tcpdump -l > mylog & tail -f mylog
  sudo tcpdump -i ens33 -vv -l > mylog & tail -f mylog
  -w: 指定文件名，.pcap是一种文件格式，这个文件可以使用 wireshark 工具读取

3 指定主机--host
  sudo tcpdump -i  ens33 -vv host 192.168.26.33

  host:指定IP地址，抓取与ip地址相关的数据包
  测试过程:
  使用两个终端窗口，一个窗口执行tcpdump命令，一个窗口执行ping www.baidu.com
  注意：通过ping www.baidu.com 可以获得百度的IP地址。
  直接执行sudo tcpdump -i ens33 host www.baidu.com也可以。


4 指定源主机或者目的主机: src  dst
  sudo tcpdump -i  ens33 -vv src 192.168.26.33
  sudo tcpdump -i  ens33 -vv dst 192.168.26.33

  sudo tcpdump -i ens33 src IP地址
  说明:抓包的时候只看源地址
  例如:sudo tcpdump -i ens33 src 111.13.100.91

  sudo tcpdump -i ens33 dst IP地址
  说明:抓包的时候只看目的地址
  例如:sudo tcpdump -i ens33 dst 111.13.100.92

5 抓包时指定端口:port
  sudo tcpdump -i ens33 -vv port 21  //可以抓到其它用户fpt登录的密码

  sudo tcpdump -i ens33 -vv port 端口号
  说明:抓包的时候只抓某个端口的
  例如:sudo tcpdump -ens33 -vv port 21
  测试:在windows上用ftp工具登录，上传域者下载文件都可以测试到。


6 抓包的时候指定协议
  sudo tcpdump -i ens33 -vv icmp
  sudo tcpdump -i ens33 -vv tcp
  sudo tcpdump -i ens33 -vv udp
  sudo tcpdump -i ens33 -vv arp
  测试的过程:可以ping localhost获取arp数据


wireshark
让普通用户也可以执行wireshark1
1 添加wireshark组
  groupadd wireshark

2 将itcast用户添加到wireshark组
  usermod -aG wireshark itcast

3 将 /usr/bin/dumpcap /usr/bin/wireshark 添加到 wireshark 组
  chmod root:wireshark /usr/bin/dumpcap
  chmod root:wireshark /usr/bin/wireshark

4.Http模式过滤
  http.request.method=="GET",只显示HTTP GET方法的。

5．逻辑运算符为 AND / OR
  ip.addr==61.135.169.121 or http

过滤条件:
使用协议: tcp udp
使用IP地址过滤: ip.src==xxxx   ip.dst==xxxx  ip.addr==xxxxx
使用端口过滤:  tcp.port  tcp.srcport  tcp.dstport
可以使用逻辑运算符: or and !

注意:使用协议进行过滤,要使用小写，如tcp ftp http等
例如:
  ip.src==xxxx or ip.dst==xxxx
  ip.addr==xXxx只要有xxxx这个ip就抓出来
  tcp and tcp.port==21 ----测试windows登录ftp服务，端口是21可以看到三次握手过程

telnet登录远程服务:
  telnet HOST
  telnet HOST -l itcast

综合实验:
过滤条件为:ip.addr==61.135.169.121 or http分析一下tcp ip http协议
分析三次握手和四次挥手


如何分析IP TCP UDP协议
1 使用wireshark工具抓包
2 对照TCP IP UDP协议进行分析.

如何让普通用户也具有执行wireshark命令的权限?
修改/bin/wireshark  /bin/dumpcap 文件的SUID位
sudo chmod u+s /bin/wireshark
sudo chmod u+s /bin/dumpcap

wireshark怎么抓包、wireshark抓包详细图文教程:
https://blog.csdn.net/qq_37879717/article/details/79017478


防火墙:
基本命令格式如下：
iptables [-AI chain] [-io interface] [-p tcp,udp] [-s 来源 IP] [--sport 端口范围] [-d 目标 IP] [--dport 端口范围] -j [ACCEPT,DROP,REJECT]
--sport：限制来源的端口号，可以是单个端口，也可以是一个范围，如 1024:1050
--dport：限制目标的端口号。
注意，因为只有 tcp 协议和 udp 协议使用了端口号，所以在使用 --sport 和 --dport 时，一定要指定协议的类型(-p tcp 或 -p udp)。

1 4表 5链  n条规则
  表: filter raw managle  nat
  链: INPUT OUTPUT PREROUTING POSTROUTING FORWARD
  规则: 就是条件(放行或者阻止的条件)

2 修改默认规则
  sudo iptables -t  filter -P INPUT DROP
  sudo iptables -t  filter -P INPUT ACCEPT
  sudo iptables -t  filter -P OUTPUT DROP
  sudo iptables -t  filter -P OUTPUT ACCEPT

3 查看配置的规则
  sudo iptables -t filter -L --line-numbers

4 使用端口-dport  -sport -p 协议
  sudo iptables -t filter -A INPUT -p tcp --dport 21 -j DROP

5 删除配置的规则
  sudo iptables -t filter -F
  sudo iptables -t filter -D INPUT num

6 在某个规则之前插入一条规则
  sudo iptables -t filter -A INPUT -p tcp --dport 23 -j DROP
  sudo iptables -t filter -A OUTPUT -p tcp --sport 23 -j DROP
  sudo iptables -t filter -I INPUT 1 -p tcp --dport 80 -j DROP

然后看看 filter 表的规则：
$ sudo iptables -L -v

iptables-save 命令提供了另外一种风格的输出：
$ sudo iptables-save

详解Linux iptables 命令:
https://www.jb51.net/article/144260.htm

规则配置常用参数:
1 根据源地址或者目的地址配置规则
	-s : 指定源IP地址
	-d : 指定目的IP地址
	sudo iptables -t filter -A OUTPUT -s 192.168.10.129 -j DROP  //限制这个IP输出数据
	sudo iptables -t filter -A INPUT  -d 192.168.10.129 -j DROP  //限制目的IP输入数据

	sudo iptables -t filter -A OUTPUT -s 192.168.10.0/24 -j DROP //只要是10网段的IP都不可以输出
	sudo iptables -t filter -A INPUT  -d 192.168.10.0/24 -j DROP
2 根据协议
	tcp
	udpUDP
	icmp

	案例: 限制外界主机ping服务器
	sudo iptables -t filter -A INPUT -p icmp -j DROP
	sudo iptables -t filter -A OUTPUT -p icmp -j DROP
	sudo iptables -t filter -A INTPUT -p icmp --icmp-type 8  -j DROP
	sudo iptables -t filter -A OUTPUT -p icmp --icmp-type 0  -j DROP

3 根据网卡配置规则
    sudo iptables -t filter -i ens33 -A INPUT -p icmp -j DROP
    sudo iptables -t filter -o ens33 -A OUTPUT -p icmp -j DROP


问题: 在同一条链中的规则, 假如有两条或者多条规则有冲突(矛盾), 则配置在最前面的规则有效。
sudo iptables -t filter -A INPUT -p tcp --dport 23 -j DROP    //第一条有效
sudo iptables -t filter -A INPUT -p tcp --dport 23 -j ACCEPT  //第二条无效


实验一:
1 限制客户端使用ssh服务远程登录服务器
  sudo iptables -t filter -A INPUT -p tcp --dport 22 -j DROP

2 允许其中一台主机可以访问
  sudo iptables -t filter -I INPUT 1 -s 192.168.10.1 -p tcp --dport 22 -j ACCEPT

3 让一个网段的主机都可以访问
  sudo iptables -t filter -I INPUT 1 -s 192.168.10.0/24 -p tcp --dport 22 -j ACCEP

4 限制服务器使用ssh服务登录其他的主机
sudo iptables Tt filter -A OUTPUT -p tcp --dport 22 -j DROPsudo iptables -t filter -A INPUT -p tcp --sport 22 -j DROP

方法2:
允许某个主机访问服务器的ssh服务
将默认策略修改为DROP,然后将某一个主机或者某一个网段加入到白名单中
sudo iptables -t filter -A INPUT -s 192.168.10.1 -p tcp --dport 22 -j ACCEPT
sudo iptables -t filter -A OUTPUT -d 192.168.10.1 -p tcp --sport 22 -j ACCEPT

允许一个网段的主机可以访问服务器:
sudo iptables -t filter -A INPUT -s 192.168.10.0/24 -p tcp --dport 22 -j ACCEPT
sudo iptables -t filter -A OUTPUT -d 192.168.10.0/24 -p tcp --sport 22 -j ACCEPT

实验二:
禁止外界主机ping服务器
方法1:修改配置文件/proc/sys/net/ipv4/icmp_echo_ignore_all
      这个配置文件默认是e，修改为1就可以阻止外界主机ping服务器

方法2:使用防火墙
    sudo iptables -t filter -A INPUT -p icmp --icmp-type echo-request -j DROP
    sudo iptables -t filter -A OUTPUT -p icmp --icmp-type echo-reply -j DROP

实验三:
禁止服务器ping其他主机:
    sudo iptables -t filter -A OUTPUT -p icmp --icmp-type echo-request -j DROP
    sudo iptables -t filter -A INPUT -p icmp --icmp-type echo-reply -j DROP

规则的生效顺序:
    规则的次序非常关键，谁的规则越严格，应该放的越靠前，而检查规则的时候，是按照从上往下的方式进行
	牢记以下三点式理解iptables规则的关键:
      -Rules包括一个条件和一个目标(target)
      -如果满足条件,就执行目标(target)中的规则或者特定值。
	  -如果不满足条件,就判断下一条Rules。
      -如果全部Rules都不匹配，则执行默认Target（系统默认ACCEPT)

Tcpwrapper:是一个轻量级的防火墙，可以实现过滤功能，但是不如iptables能实现更新粒度的过滤.
有关的配置文件:
  /etc/hosts.allow
  /etc/hosts.deny
过滤的规则:
  1 如果hosts.allow文件中有，则接受，不再检查hosts.deny
  2 如果hosts.allow文件中没有,则检查hosts.deny文件
      --若hosts.deny文件有,则拒绝
	  --若hosts.deny文件没有,则接受
  3 如果上述两个文件都没有配置,则接受。

只有使用了libwrap.so库的才可以使用这个配置;
如: sshd服务，使用ldd sshd可以查看sshd服务链接了哪些库文件.

实验1: 限制某一个网段的主机访问ssh服务,只允许一个主机访问ssh服务
  1 修改/etc/hosts.deny文件,将一个网段的IP加入到文件中
    sshd: 192.168.10.0/24
  2 将某个主机的IP加入到/etc/ hosts.allow文件中
    sshd: 192.168.10.1

实验2:限制某个网段的主机访问vsftpd服务
  1 修改vsftpd的配置文件，/etc/vsftpd.conf添加:tcp_wrappers=YES
  2 修改vsftpd.conf文件之后重启服务.
  3 修改/etc/hosts.deny文件,将一个网段的IP加入到文件中
    vsftpd: 192.168.10.0/24
  4 将某个主机的IP加入到/etc/ hosts.allow文件中
    vsftpd:192.168.10.1

Tcpwrapper防火墙的优缺点:
  优点:简单，使用的时候不用修改代码，只需修改配置文件即可使用．
       修改配置文件之后,也无需重启服务就可以使用.
  缺点:不是所有的服务都可以使用tcpwrapper进行防火墙的设置.
       只有服务的可执行文件中用到了libwrap.so库的才可以使用.


入侵监测分析:
用户账户分析:
1 关注可登录的用户，/etc/passwd文件中每一行的最后一个是否为/bin/bash
2 关注/etc/passwd文件中有没有非法账户
3 执行id user可以查看关注的用户是否在root特权组中
  一旦某个用户加入到了特权组，就意味者拥有了这个组的特权
4 使用lastlog last lastb aureport -au命令查看用户登录情况，如果有异常则需要特别关注。

1 将某个用户加入到某个组中
  usermod -aG grpname username

2 sudo提升用户权限


7 lsof命令:https://www.cnblogs.com/sparkbj/p/7161669.html
开机自启服务:
    在/etc/rc5.d文件中，一S开头的文件，表示开机的时候会启动的服务
	有的是以K开头的,表示关机的时候会执行．

	执行“runlevel”命令可以查看当前运行的运行级别，本机运行的级别为5。
	可以通过man runlevel查看相关的帮助信息。

    init进程:

	查看开机的时候都会启动哪些服务:
	sudo systemct1 list-unit-files
    sudo systemct1 list-unit-files l grep enabled

	启动-停止-查看状态--开启自启动--关闭自启动
    sudo systemctl start sshd.service
    sudo systemctl stop sshd. service
	sudo systemct1 status sshd.service
	sudo systemct1 enable ssh. service
	sudo systemct1 disable ssh.service
    停止sshd服务后，在终端上可以继续操作,原来连上终端的可以继续使用;
	如果clone一个会话也可以,但是如果在新开一个终端则不可以。
