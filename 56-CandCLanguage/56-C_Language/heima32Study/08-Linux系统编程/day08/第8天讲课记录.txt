守护进程的特点:
	1 一个linux后台服务进程
	2 不依赖于控制终端
	3 周期性执行某些任务
	4 不受用户登录和注销的影响
	5 一般以d结尾

进程组和会话:
	进程组: 一个进程包含多个进程
	会话: 多个组组成一个会话.

	创建会话的进程不能是组长进程;
	一般创建会话是父进程先fork子进程, 然后父进程退出, 让子进程调用setsid函数
	创建一个会话, 这个子进程既是会长也是组长;
	只要是创建了会话, 这个进程就脱离了控制终端的影响.

创建守护进程模型:
	1 父进程fork子进程, 然后父进程退出.
	   目的是: 子进程肯定不是组长进程, 为后续调用setsid函数提供了条件.
	2 子进程调用setsid函数创建一个新的会话.
		1 该子进程成了该会话的会长
		2 该子进程成了该组的组长进程.
		3 不再受控制终端的影响了
	3 改变当前的工作目录, chdir  -----不是必须的
	4 重设文件掩码, umask(0000)  -----不是必须的
	5 关闭STDIN_FILENO  STDOUT_FILENO STDERR_FILENO   ---不是必须的
	6 核心操作

编写一个守护进程，每隔2S钟获取一次系统时间，并将这个时间写入磁盘文件。
分析：首先要按照1.3介绍的守护进行的步骤创建一个守护进程.
	每隔2S钟: 使用setitimer函数设置时钟, 该时钟发送的是SIGALRM信号,
	信号操作: 注册信号处理函数,signal或者sigaction, 还有一个信号处理函数
	获取一次系统时间: time函数的使用, ctime函数的使用
	写入磁盘文件: 文件操作函数: open write close

优化:
	1 不再频繁的打开和关闭文件
	2 如何控制log文件大小  test.log

线程相关函数:
	1 创建子线程: pthread_create
	2 线程退出: pthread_exit
	3 回收子线程: pthread_join
	4 设置子线程为分离属性: pthread_detach

在创建线程的时候设置线程属性为分离属性:
	1 pthread_attr_t attr;
	2 pthread_attr_init(&attr);
	3 pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	4 pthread_create(&thread, &attr, mythread, NULL);
	5 pthread_attr_destroy(&attr);

n = number;
n++;
number = n;
printf("1:[%d]\n", number);

线程同步:
	互斥锁: 线程A和线程B共同访问共享资源, 当线程A想访问共享资源的时候,
	要先获得锁, 如果锁被占用, 则加锁不成功需要阻塞等待对方释放锁;
	若锁没有被占用, 则获得锁成功--加锁, 然后操作共享资源, 操作完之后,
	必须解锁, 同理B也是和A一样.
	---->也就是说, 同时不能有两个线程访问共享资源, 属于互斥操作.

原子操作:该操作要么不执行，要么就完成.
互斥锁的使用步骤:
	1 创建一把锁: pthread_ mutex_ t mutex; //mutex=1;
	2 在main函数中初始化互斥锁: pthread_ mutex_ _init (&mutex, NULL);
	3 锁的使用---在共享资源出现的位置的上下加锁和解锁
		pthread_ mutex_ lock (&mutex);     // mutex--
		////共享资源操作的代码
		pthread_ mutex_ _unlock ( &mutex); //mutex++
	4 在main函数中释放互斥锁
		pthread_ mutex_ destroy( &mutex);
	