1父子进程可以共享文件

基本概念：
      
两个进程要想完成数据交换，必须通过内核；
      一个进程将数据写到内核，然后另一个进程从内核读走数据。

      
IPC：进程间通信(interprocess communication)


管道：
      1 管道的本质是一块内核缓冲区，内部的实现是环形队列

      2 管道有读写两端，读写两端是两个文件描述符
      
3 数据的流向是从管道的写端流到管道的读端(数据的流向是单向的)

      4 数据被读走之后，在管道中就消失了

      5 pipe只能用于有血缘关系的进程间通信

      6 管道的读写两端是阻塞的
7管道的大小默认是4k，但是会根据实际情况做适当调整.。

      int pipe(int fd[2]);  //长度为2的数组
      int pipe(int *fd);    //这个写法跟上面是一样的
      sizeof(fd);

pipe用于父子进程间通信：
      1 父进程创建pipe

      2 父进程调用fork函数创建子进程
      3 父进程关闭一端
      
4 子进程关闭一端

      5 父进程和子进程分别执行read或者write操作

fifo完成两个进程间通信的思路：
进程A：

      1 创建一个fifo文件: mkfifo命 令或者使用mkfifo函数

      2 open fifo文件，获得一个文件描述符fd

      3 写fifo文件----write(fd, "xxx"， ...)
      
4 关闭fifo文件---close(fd);

进程B：
      1 打开fifo文件，获得文件描述符fd
      
2 读fifo文件---read(fd,
buf, sizeof(buf));

      3 关闭fifo文件---close(fd);

共享映射区：

void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);

参数：

       addr：一般传NULL,表示让内核去指定一个内存起始地址
       
length：文件大小;
lseek或者stat函数

       prot：PROT_ _READ PROT_ WRITE PROT_ READ| PROT_ WRITE
       
flags：
              MAP_ SHARED：对映射区的修改会反映到文件中(可以对文件进行修改)
              
MAP_ PRIVATE：对映射区的修改不会对“文件”产生影响。
       fd：打开的文件描述符
             
fd = open();

       offset：从文件的哪个位置开始映射，一般传0

返回值：
       映射区的首地址

匿名映射：只能用于有血缘关系的进程间通信
       mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
       MAP_ANONYMOUS必须与MAP_SHARED一起使用，而且fd指定为-1